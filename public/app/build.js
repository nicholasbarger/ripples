!function(){"use strict";angular.module("app.core",["ngRoute"])}();
!function(){"use strict";angular.module("app.ide",["app.core"])}();
!function(){"use strict";angular.module("app",["app.auth","app.ide","app.monitor"])}();
!function(){"use strict";angular.module("app").config(function(){})}();
!function(){"use strict";angular.module("app.auth",["ngRoute"])}();
!function(){"use strict";angular.module("app.auth").config(["$routeProvider",function(l){l.when("/login",{templateUrl:"auth/login.html",controller:"LoginController",controllerAs:"vm"}).when("/signup",{templateUrl:"auth/signup.html",controller:"SignupController",controllerAs:"vm"})}])}();
!function(){"use strict";angular.module("app.auth").controller("LoginController",["loginService",function(n){var i=this;i.credentials=n.credentials,i.login=n.login}])}();
!function(){"use strict";angular.module("app.auth").factory("loginService",["rippleApi",function(n){function l(){return n.call("post","/auth/login",this.credentials)}return{credentials:{email:null,password:null},login:l}}])}();
!function(){"use strict";angular.module("app.auth").controller("SignupController",function(){})}();
!function(){"use strict";function o(o){o.when("/not-found",{templateUrl:"core/not-found.html"}).otherwise({redirectTo:"/not-found"})}angular.module("app.ide").config(o),o.$inject=["$routeProvider"]}();
!function(){"use strict";angular.module("app.core").directive("rip-grid",function(){return{restrict:"E",scope:{data:"@"},templateUrl:"rip-grid.directive.tmpl.html",transclude:!0,controllerAs:"ripGridController",controller:function(){}}})}();
!function(){"use strict";angular.module("app.core").directive("ripInput",function(){return{restrict:"E",scope:{label:"@",name:"@",ngModel:"=",placeholder:"@",readonly:"@",type:"@"},require:"ngModel",templateUrl:"core/rip-input.directive.tmpl.html",controllerAs:"ripInputController",controller:function(){}}})}();
!function(){"use strict";angular.module("app.core").factory("rippleApi",["$http","$q",function(t,e){function n(n,r,a,i,o){var u=e.defer();return-1===r.indexOf("api/v")&&(r="/api/v1"+r),t({method:n,url:r,data:a}).then(function(t){u.resolve(t.data)},function(t){u.reject(t)}),u.promise}return{call:n}}])}();
!function(){"use strict";angular.module("app-gallery",[])}();
!function(){"use strict";function l(l){l.when("/gallery",{templateUrl:"index.html",controller:"IndexController"}).when("/gallery/ripples/:id",{templateUrl:"gallery-detail.html",controller:"GalleryDetailController"})}angular.module("app-gallery").config(l),l.$inject=["$routeProvider"]}();
!function(){"use strict";function e(e){e.when("/ide",{templateUrl:"ide/index.html",controller:"IdeIndexController",controllerAs:"vm"}).when("/ide/create",{templateUrl:"ide/create.html",controller:"RippleCreateController",controllerAs:"vm",resolve:{ripple:["rippleCreateService",function(e){return e.newRipple()}]}}).when("/ide/detail/:id",{templateUrl:"ide/detail.html",controller:"RippleDetailController",controllerAs:"vm",resolve:{ripple:["$route","rippleEditService",function(e,r){return r.load(e.current.params.id)}]}}).when("/ide/disable/:id",{templateUrl:"ide/disable.html",controller:"RippleDisableController",controllerAs:"vm",resolve:{ripple:["rippleEditService",function(e){return e.ripple}]}}).when("/ide/edit/:id",{templateUrl:"ide/edit.html",controller:"RippleEditController",controllerAs:"vm",resolve:{ripple:["rippleEditService",function(e){return e.ripple}]}})}angular.module("app.ide").config(e),e.$inject=["$routeProvider"]}();
!function(){"use strict";angular.module("app.ide").controller("RippleCreateController",["rippleCreateService","ripple",function(e,r){var l=this;l.cancel=e.cancel,l.ripple=r,l.submit=e.save}])}();
!function(){"use strict";angular.module("app.ide").factory("rippleCreateService",["$window","rippleApi",function(e,n){function i(){e.history.back()}function r(){return n.call("get","/ripples/new")}function t(e){return n.call("post","/ripples/"+e.id,e)}return{cancel:i,newRipple:r,save:t}}])}();
!function(){"use strict";angular.module("app.ide").controller("RippleDetailController",["ripple",function(l){console.log("RippleDetailController here",l);var e=this;e.ripple=l}])}();

!function(){"use strict";angular.module("app.ide").controller("RippleEditController",["rippleEditService","ripple",function(e,i){var r=this;r.incrementVersion=e.incrementVersion,r.save=e.save}])}();
!function(){"use strict";angular.module("app.ide").factory("rippleEditService",["rippleApi",function(e){function n(n){return e.call("delete","/ripples/"+n)}function r(e){return e++}function i(n){return e.call("get","/ripples/"+n)}function t(n){return e.call("put","/ripples/"+n._id,n)}return{disable:n,incrementVersion:r,load:i,save:t}}])}();
!function(){"use strict";angular.module("app.ide").controller("IdeIndexController",["ideIndexService",function(e){function o(){console.log("loading data"),e.load(l.filter).then(function(e){console.log("data loaded",e),l.ripples=e})}console.log("entered index controller for ide");var l=this;l.filter=e.filter,l.ripples=[],o()}])}();
!function(){"use strict";angular.module("app.ide").factory("ideIndexService",["rippleApi",function(e){function i(i){return e.call("get","/ripples",i)}return console.log("started index service for ide"),{filter:{},load:i}}])}();
!function(){"use strict";angular.module("app.ide").directive("ripFilter",function(){return{restrict:"E",scope:{data:"=",fetch:"@"},templateUrl:"ide/rip-filter.directive.tmpl.html",controllerAs:"ripFilterController",controller:function(){var t=this;t.criteria={},t.filter=function(){fetch(function(r){t.data=r.data})}}}})}();
!function(){"use strict";angular.module("app.monitor",["app.core"])}();
!function(){"use strict";angular.module("app.monitor").config(["$routeProvider",function(n){n.when("/monitor",{templateUrl:"monitor/index.html",controller:"MonitorIndexController",controllerAs:"vm"}).when("/monitor/instances/:id",{templateUrl:"monitor/instance-detail.html",controller:"InstanceDetailController",controllerAs:"vm",resolve:{instance:["$route","instanceDetailService",function(n,t){return t.load(n.current.params.id)}]}})}])}();
!function(){"use strict";angular.module("app.monitor").controller("MonitorIndexController",["monitorIndexService",function(n){function t(){n.load(o.filter).then(function(n){o.instances=n})}var o=this;o.filter=n.filter,o.instances=[],t()}])}();
!function(){"use strict";angular.module("app.monitor").factory("monitorIndexService",["rippleApi",function(n){function t(t){return n.call("get","/instances",t)}return{filter:{},load:t}}])}();
!function(){"use strict";angular.module("app.monitor").controller("InstanceDetailController",["instance",function(n){var t=this;t.instance=n}])}();
!function(){"use strict";angular.module("app.monitor").factory("instanceDetailService",["rippleApi",function(n){function t(t){return n.call("get","/instances/"+t)}return{load:t}}])}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC1jb3JlLm1vZHVsZS5qcyIsImFwcC1pZGUubW9kdWxlLmpzIiwiYXBwLm1vZHVsZS5qcyIsImFwcC5jb25maWcuanMiLCJhdXRoL2FwcC1hdXRoLm1vZHVsZS5qcyIsImF1dGgvYXBwLWF1dGgucm91dGVzLmpzIiwiYXV0aC9sb2dpbi5jb250cm9sbGVyLmpzIiwiYXV0aC9sb2dpbi5zZXJ2aWNlLmpzIiwiYXV0aC9zaWdudXAuY29udHJvbGxlci5qcyIsImNvcmUvYXBwLWNvcmUucm91dGVzLmpzIiwiY29yZS9yaXAtZ3JpZC5kaXJlY3RpdmUuanMiLCJjb3JlL3JpcC1pbnB1dC5kaXJlY3RpdmUuanMiLCJjb3JlL3JpcHBsZS1hcGkuc2VydmljZS5qcyIsImdhbGxlcnkvYXBwLWdhbGxlcnkubW9kdWxlLmpzIiwiZ2FsbGVyeS9hcHAtZ2FsbGVyeS5yb3V0ZXMuanMiLCJpZGUvYXBwLWlkZS5yb3V0ZXMuanMiLCJpZGUvY3JlYXRlLmNvbnRyb2xsZXIuanMiLCJpZGUvY3JlYXRlLnNlcnZpY2UuanMiLCJpZGUvZGV0YWlsLmNvbnRyb2xsZXIuanMiLCJpZGUvZGlzYWJsZS5jb250cm9sbGVyLmpzIiwiaWRlL2VkaXQuY29udHJvbGxlci5qcyIsImlkZS9lZGl0LnNlcnZpY2UuanMiLCJpZGUvaW5kZXguY29udHJvbGxlci5qcyIsImlkZS9pbmRleC5zZXJ2aWNlLmpzIiwiaWRlL3JpcC1maWx0ZXIuZGlyZWN0aXZlLmpzIiwibW9uaXRvci9hcHAtbW9uaXRvci5tb2R1bGUuanMiLCJtb25pdG9yL2FwcC1tb25pdG9yLnJvdXRlcy5qcyIsIm1vbml0b3IvaW5kZXguY29udHJvbGxlci5qcyIsIm1vbml0b3IvaW5kZXguc2VydmljZS5qcyIsIm1vbml0b3IvaW5zdGFuY2UtZGV0YWlsLmNvbnRyb2xsZXIuanMiLCJtb25pdG9yL2luc3RhbmNlLWRldGFpbC5zZXJ2aWNlLmpzIl0sIm5hbWVzIjpbImFuZ3VsYXIiLCJtb2R1bGUiLCJjb25maWciLCIkcm91dGVQcm92aWRlciIsIndoZW4iLCJ0ZW1wbGF0ZVVybCIsImNvbnRyb2xsZXIiLCJjb250cm9sbGVyQXMiLCJsb2dpblNlcnZpY2UiLCJ2bSIsInRoaXMiLCJjcmVkZW50aWFscyIsImxvZ2luIiwiZmFjdG9yeSIsInJpcHBsZUFwaSIsImNhbGwiLCJlbWFpbCIsInBhc3N3b3JkIiwib3RoZXJ3aXNlIiwicmVkaXJlY3RUbyIsIiRpbmplY3QiLCJkaXJlY3RpdmUiLCJyZXN0cmljdCIsInNjb3BlIiwiZGF0YSIsInRyYW5zY2x1ZGUiLCJsYWJlbCIsIm5hbWUiLCJuZ01vZGVsIiwicGxhY2Vob2xkZXIiLCJyZWFkb25seSIsInR5cGUiLCJyZXF1aXJlIiwiJGh0dHAiLCIkcSIsIm1ldGhvZCIsInVybCIsIm9uU3VjY2VzcyIsIm9uRXJyb3IiLCJkZWZlcnJlZCIsImRlZmVyIiwiaW5kZXhPZiIsInRoZW4iLCJyZXNwb25zZSIsInJlc29sdmUiLCJlcnJvciIsInJlamVjdCIsInByb21pc2UiLCJyaXBwbGUiLCJyaXBwbGVDcmVhdGVTZXJ2aWNlIiwibmV3UmlwcGxlIiwiJHJvdXRlIiwicmlwcGxlRWRpdFNlcnZpY2UiLCJsb2FkIiwiY3VycmVudCIsInBhcmFtcyIsImlkIiwiY2FuY2VsIiwic3VibWl0Iiwic2F2ZSIsIiR3aW5kb3ciLCJoaXN0b3J5IiwiYmFjayIsImNvbnNvbGUiLCJsb2ciLCJpbmNyZW1lbnRWZXJzaW9uIiwiZGlzYWJsZSIsIl9pZCIsInZlcnNpb24iLCJpZGVJbmRleFNlcnZpY2UiLCJhY3RpdmF0ZSIsImZpbHRlciIsInJpcHBsZXMiLCJmZXRjaCIsImNyaXRlcmlhIiwiaW5zdGFuY2UiLCJpbnN0YW5jZURldGFpbFNlcnZpY2UiLCJtb25pdG9ySW5kZXhTZXJ2aWNlIiwiaW5zdGFuY2VzIl0sIm1hcHBpbmdzIjoiQ0FBQSxXQUNDLFlBRUFBLFNBQ0VDLE9BQU8sWUFBYTtDQ0p2QixXQUNDLFlBRUFELFNBQ0VDLE9BQU8sV0FBWTtDQ0p0QixXQUNDLFlBRUFELFNBQ0lD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MUMsUUFBU3VDLEdBQUtHLEdBQ2IsTUFBTzFDLEdBQVVDLEtBQUssTUFBTyxjQUFnQnlDLEdBTDlDLE9BQ0NILEtBQU1BIiwiZmlsZSI6ImJ1aWxkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCkge1xuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRhbmd1bGFyXG5cdFx0Lm1vZHVsZSgnYXBwLmNvcmUnLCBbJ25nUm91dGUnXSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0YW5ndWxhclxuXHRcdC5tb2R1bGUoJ2FwcC5pZGUnLCBbJ2FwcC5jb3JlJ10pO1xufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdGFuZ3VsYXJcbiAgXHRcdC5tb2R1bGUoJ2FwcCcsIFsnYXBwLmF1dGgnLCAnYXBwLmlkZScsICdhcHAubW9uaXRvciddKTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHRhbmd1bGFyXG5cdFx0Lm1vZHVsZSgnYXBwJylcblx0XHRcdC5jb25maWcoZnVuY3Rpb24oKSB7XG5cdFx0XHR9KTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHRhbmd1bGFyXG5cdFx0Lm1vZHVsZSgnYXBwLmF1dGgnLCBbJ25nUm91dGUnXSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0YW5ndWxhclxuXHRcdC5tb2R1bGUoJ2FwcC5hdXRoJylcblx0XHRcdC5jb25maWcoXG5cdFx0XHRcdGZ1bmN0aW9uKCRyb3V0ZVByb3ZpZGVyKSB7XG5cdFx0XHRcdCRyb3V0ZVByb3ZpZGVyXG5cdFx0XHRcdFx0LndoZW4oJy9sb2dpbicsIHtcblx0XHRcdFx0XHRcdHRlbXBsYXRlVXJsOiAnYXV0aC9sb2dpbi5odG1sJyxcblx0XHRcdFx0XHRcdGNvbnRyb2xsZXI6ICdMb2dpbkNvbnRyb2xsZXInLFxuXHRcdFx0XHRcdFx0Y29udHJvbGxlckFzOiAndm0nXG5cdFx0XHRcdFx0fSlcblx0XHRcdFx0XHQud2hlbignL3NpZ251cCcsIHtcblx0XHRcdFx0XHRcdHRlbXBsYXRlVXJsOiAnYXV0aC9zaWdudXAuaHRtbCcsXG5cdFx0XHRcdFx0XHRjb250cm9sbGVyOiAnU2lnbnVwQ29udHJvbGxlcicsXG5cdFx0XHRcdFx0XHRjb250cm9sbGVyQXM6ICd2bSdcblx0XHRcdFx0XHR9KTtcblx0XHRcdH0pO1x0XG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0YW5ndWxhclxuXHRcdC5tb2R1bGUoJ2FwcC5hdXRoJylcblx0XHRcdC5jb250cm9sbGVyKCdMb2dpbkNvbnRyb2xsZXInLCBmdW5jdGlvbihsb2dpblNlcnZpY2UpIHtcblx0XHRcdFx0dmFyIHZtID0gdGhpcztcblx0XHRcdFx0dm0uY3JlZGVudGlhbHMgPSBsb2dpblNlcnZpY2UuY3JlZGVudGlhbHM7XG5cdFx0XHRcdHZtLmxvZ2luID0gbG9naW5TZXJ2aWNlLmxvZ2luO1xuXHRcdFx0fSk7XG59KSgpOyIsIihmdW5jdGlvbigpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdGFuZ3VsYXJcblx0XHQubW9kdWxlKCdhcHAuYXV0aCcpXG5cdFx0XHQuZmFjdG9yeSgnbG9naW5TZXJ2aWNlJywgZnVuY3Rpb24ocmlwcGxlQXBpKSB7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0Y3JlZGVudGlhbHM6IHsgZW1haWw6IG51bGwsIHBhc3N3b3JkOiBudWxsIH0sXG5cdFx0XHRcdFx0bG9naW46IGxvZ2luXG5cdFx0XHRcdH07XG5cblx0XHRcdFx0ZnVuY3Rpb24gbG9naW4oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJpcHBsZUFwaS5jYWxsKCdwb3N0JywgJy9hdXRoL2xvZ2luJywgdGhpcy5jcmVkZW50aWFscyk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdGFuZ3VsYXJcblx0XHQubW9kdWxlKCdhcHAuYXV0aCcpXG5cdFx0XHQuY29udHJvbGxlcignU2lnbnVwQ29udHJvbGxlcicsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgdm0gPSB0aGlzO1xuXHRcdFx0fSk7XG59KSgpOyIsIihmdW5jdGlvbigpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdGFuZ3VsYXJcblx0XHQubW9kdWxlKCdhcHAuaWRlJylcblx0XHRcdC5jb25maWcoY29uZmlnKTtcblxuXHRmdW5jdGlvbiBjb25maWcoJHJvdXRlUHJvdmlkZXIpIHtcblx0XHQkcm91dGVQcm92aWRlclxuXHRcdFx0LndoZW4oJy9ub3QtZm91bmQnLCB7XG5cdFx0XHRcdHRlbXBsYXRlVXJsOiAnY29yZS9ub3QtZm91bmQuaHRtbCdcblx0XHRcdH0pXG5cdFx0XHQub3RoZXJ3aXNlKHtcblx0XHRcdFx0cmVkaXJlY3RUbzogJy9ub3QtZm91bmQnXG5cdFx0XHR9KTtcblx0XHR9XG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0YW5ndWxhclxuXHRcdC5tb2R1bGUoJ2FwcC5jb3JlJylcblx0XHRcdC5kaXJlY3RpdmUoJ3JpcC1ncmlkJywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0cmVzdHJpY3Q6ICdFJyxcblx0XHRcdFx0XHRzY29wZToge1xuXG5cdFx0XHRcdFx0XHQvLyB0aGUgZGF0YXNldCB0byBiZSBkaXNwbGF5ZWQgaW4gdGhlIGdyaWRcblx0XHRcdFx0XHRcdGRhdGE6ICdAJ1xuXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR0ZW1wbGF0ZVVybDogJ3JpcC1ncmlkLmRpcmVjdGl2ZS50bXBsLmh0bWwnLFxuXHRcdFx0XHRcdHRyYW5zY2x1ZGU6IHRydWUsXG5cdFx0XHRcdFx0Y29udHJvbGxlckFzOiAncmlwR3JpZENvbnRyb2xsZXInLFxuXHRcdFx0XHRcdGNvbnRyb2xsZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0Ly8gdG9kb1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdH0pO1xufSkoKTsiLCIoZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwLmNvcmUnKVxuICAgICAgLmRpcmVjdGl2ZSgncmlwSW5wdXQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgIHNjb3BlOiB7XG5cbiAgICAgICAgICAgIC8vIHRoZSBkaXNwbGF5IGxhYmVsIG9mIHRoZSBpbnB1dCBjb250cm9sXG4gICAgICAgICAgICBsYWJlbDogJ0AnLFxuXG4gICAgICAgICAgICAvLyB0aGUgbmFtZSBvZiB0aGUgaW5wdXQgY29udHJvbCAodW5pcXVlIGlkZW50aWZpZXIpXG4gICAgICAgICAgICBuYW1lOiAnQCcsXG5cbiAgICAgICAgICAgIC8vIHRvZG86IHRoZSBtb2RlbCB0byBiaW5kIHRvIChzcGVjaWFsIGF0dHJpYnV0ZSBpbiBhbmd1bGFyKVxuICAgICAgICAgICAgbmdNb2RlbDogJz0nLFxuXG4gICAgICAgICAgICAvLyBhIGRlZmF1bHQgcGxhY2Vob2xkZXIgdGV4dCB0byBzaG93XG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogJ0AnLFxuXG4gICAgICAgICAgICAvLyBzcGVjaWZpZXMgd2hldGhlciB0aGUgY29udHJvbCBpcyByZWFkb25seSBvciBub3RcbiAgICAgICAgICAgIHJlYWRvbmx5OiAnQCcsXG5cbiAgICAgICAgICAgIC8vIHRoZSB0eXBlIG9mIGlucHV0IGNvbnRyb2wgKHRleHQsIGRhdGUsIHRleHRhcmVhLCBldGMuKVxuICAgICAgICAgICAgdHlwZTogJ0AnXG5cbiAgICAgICAgICB9LFxuICAgICAgICAgIHJlcXVpcmU6ICduZ01vZGVsJyxcbiAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvcmUvcmlwLWlucHV0LmRpcmVjdGl2ZS50bXBsLmh0bWwnLFxuICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3JpcElucHV0Q29udHJvbGxlcicsXG4gICAgICAgICAgY29udHJvbGxlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyB0b2RvXG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSk7XG59KSgpOyIsIihmdW5jdGlvbigpIHtcblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0YW5ndWxhclxuXHRcdC5tb2R1bGUoJ2FwcC5jb3JlJylcblx0XHRcdC5mYWN0b3J5KCdyaXBwbGVBcGknLCBmdW5jdGlvbigkaHR0cCwgJHEpIHtcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRjYWxsOiBjYWxsXG5cdFx0XHRcdH07XG5cblx0XHRcdFx0ZnVuY3Rpb24gY2FsbChtZXRob2QsIHVybCwgZGF0YSwgb25TdWNjZXNzLCBvbkVycm9yKSB7XG5cdFx0XHRcdFx0dmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcblxuXHRcdFx0XHRcdGlmKHVybC5pbmRleE9mKCdhcGkvdicpID09PSAtMSkge1xuXHRcdFx0ICAgICAgICAgICAgdXJsID0gJy9hcGkvdjEnICsgdXJsO1xuXHRcdFx0ICAgICAgICB9XG5cdFx0XHQgICAgICAgIFxuXHRcdFx0ICAgICAgICAvLyBtYWtlIGFqYXggY2FsbCAocmV0dXJucyBhIHByb21pc2UpXG4gICAgICAgIFx0XHRcdCRodHRwKHttZXRob2Q6IG1ldGhvZCwgdXJsOiB1cmwsIGRhdGE6IGRhdGF9KVxuICAgICAgICBcdFx0XHRcdC50aGVuKFxuXHQgICAgICAgIFx0XHRcdFx0ZnVuY3Rpb24ocmVzcG9uc2UpIHtcblx0ICAgICAgICBcdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZShyZXNwb25zZS5kYXRhKTtcblx0ICAgICAgICBcdFx0XHRcdH0sXG5cdCAgICAgICAgXHRcdFx0XHRmdW5jdGlvbihlcnJvcikge1xuXHQgICAgICAgIFx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3QoZXJyb3IpO1xuXHQgICAgICAgIFx0XHRcdFx0fSk7XHRcblxuICAgICAgICBcdFx0XHRyZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG59KSgpOyIsIihmdW5jdGlvbigpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdGFuZ3VsYXJcblx0XHQubW9kdWxlKCdhcHAtZ2FsbGVyeScsIFtdKTtcdFxufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdGFuZ3VsYXJcblx0XHQubW9kdWxlKCdhcHAtZ2FsbGVyeScpXG5cdFx0XHQuY29uZmlnKGNvbmZpZyk7XHRcblxuXHRmdW5jdGlvbiBjb25maWcoJHJvdXRlUHJvdmlkZXIpIHtcblx0XHQkcm91dGVQcm92aWRlclxuXHRcdFx0LndoZW4oJy9nYWxsZXJ5Jywge1xuXHRcdFx0XHR0ZW1wbGF0ZVVybDogJ2luZGV4Lmh0bWwnLFxuXHRcdFx0XHRjb250cm9sbGVyOiAnSW5kZXhDb250cm9sbGVyJ1xuXHRcdFx0fSlcblx0XHRcdC53aGVuKCcvZ2FsbGVyeS9yaXBwbGVzLzppZCcsIHtcblx0XHRcdFx0dGVtcGxhdGVVcmw6ICdnYWxsZXJ5LWRldGFpbC5odG1sJyxcblx0XHRcdFx0Y29udHJvbGxlcjogJ0dhbGxlcnlEZXRhaWxDb250cm9sbGVyJ1xuXHRcdFx0fSk7XG5cdH1cbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHRhbmd1bGFyXG5cdFx0Lm1vZHVsZSgnYXBwLmlkZScpXG5cdFx0XHQuY29uZmlnKGNvbmZpZyk7XG5cblx0ZnVuY3Rpb24gY29uZmlnKCRyb3V0ZVByb3ZpZGVyKSB7XG5cdFx0JHJvdXRlUHJvdmlkZXJcblx0XHRcdC53aGVuKCcvaWRlJywge1xuXHRcdFx0XHR0ZW1wbGF0ZVVybDogJ2lkZS9pbmRleC5odG1sJyxcblx0XHRcdFx0Y29udHJvbGxlcjogJ0lkZUluZGV4Q29udHJvbGxlcicsXG5cdFx0XHRcdGNvbnRyb2xsZXJBczogJ3ZtJ1xuXHRcdFx0fSlcblx0XHRcdC53aGVuKCcvaWRlL2NyZWF0ZScsIHtcblx0XHRcdFx0dGVtcGxhdGVVcmw6ICdpZGUvY3JlYXRlLmh0bWwnLFxuXHRcdFx0XHRjb250cm9sbGVyOiAnUmlwcGxlQ3JlYXRlQ29udHJvbGxlcicsXG5cdFx0XHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRcdFx0cmVzb2x2ZToge1xuXHRcdFx0XHRcdHJpcHBsZTogZnVuY3Rpb24ocmlwcGxlQ3JlYXRlU2VydmljZSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJpcHBsZUNyZWF0ZVNlcnZpY2UubmV3UmlwcGxlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9KVxuXHRcdFx0LndoZW4oJy9pZGUvZGV0YWlsLzppZCcsIHtcblx0XHRcdFx0dGVtcGxhdGVVcmw6ICdpZGUvZGV0YWlsLmh0bWwnLFxuXHRcdFx0XHRjb250cm9sbGVyOiAnUmlwcGxlRGV0YWlsQ29udHJvbGxlcicsXG5cdFx0XHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRcdFx0cmVzb2x2ZToge1xuXHRcdFx0XHRcdHJpcHBsZTogZnVuY3Rpb24oJHJvdXRlLCByaXBwbGVFZGl0U2VydmljZSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJpcHBsZUVkaXRTZXJ2aWNlLmxvYWQoJHJvdXRlLmN1cnJlbnQucGFyYW1zLmlkKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0pXG5cdFx0XHQud2hlbignL2lkZS9kaXNhYmxlLzppZCcsIHtcblx0XHRcdFx0dGVtcGxhdGVVcmw6ICdpZGUvZGlzYWJsZS5odG1sJyxcblx0XHRcdFx0Y29udHJvbGxlcjogJ1JpcHBsZURpc2FibGVDb250cm9sbGVyJyxcblx0XHRcdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdFx0XHRyZXNvbHZlOiB7XG5cdFx0XHRcdFx0cmlwcGxlOiBmdW5jdGlvbihyaXBwbGVFZGl0U2VydmljZSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJpcHBsZUVkaXRTZXJ2aWNlLnJpcHBsZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0pXG5cdFx0XHQud2hlbignL2lkZS9lZGl0LzppZCcsIHtcblx0XHRcdFx0dGVtcGxhdGVVcmw6ICdpZGUvZWRpdC5odG1sJyxcblx0XHRcdFx0Y29udHJvbGxlcjogJ1JpcHBsZUVkaXRDb250cm9sbGVyJyxcblx0XHRcdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdFx0XHRyZXNvbHZlOiB7XG5cdFx0XHRcdFx0cmlwcGxlOiBmdW5jdGlvbihyaXBwbGVFZGl0U2VydmljZSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJpcHBsZUVkaXRTZXJ2aWNlLnJpcHBsZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHR9XG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRhbmd1bGFyXG5cdFx0Lm1vZHVsZSgnYXBwLmlkZScpXG5cdFx0XHQuY29udHJvbGxlcignUmlwcGxlQ3JlYXRlQ29udHJvbGxlcicsIGZ1bmN0aW9uKHJpcHBsZUNyZWF0ZVNlcnZpY2UsIHJpcHBsZSkge1xuXHRcdFx0XHR2YXIgdm0gPSB0aGlzO1xuXHRcdFx0XHR2bS5jYW5jZWwgPSByaXBwbGVDcmVhdGVTZXJ2aWNlLmNhbmNlbDtcblx0XHRcdFx0dm0ucmlwcGxlID0gcmlwcGxlO1xuXHRcdFx0XHR2bS5zdWJtaXQgPSByaXBwbGVDcmVhdGVTZXJ2aWNlLnNhdmU7XG5cdFx0XHR9KTtcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRhbmd1bGFyXG5cdFx0Lm1vZHVsZSgnYXBwLmlkZScpXG5cdFx0XHQuZmFjdG9yeSgncmlwcGxlQ3JlYXRlU2VydmljZScsIGZ1bmN0aW9uKCR3aW5kb3csIHJpcHBsZUFwaSkge1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdGNhbmNlbDogY2FuY2VsLFxuXHRcdFx0XHRcdG5ld1JpcHBsZTogbmV3UmlwcGxlLFxuXHRcdFx0XHRcdHNhdmU6IHNhdmVcblx0XHRcdFx0fTtcblxuXHRcdFx0XHRmdW5jdGlvbiBjYW5jZWwoKSB7XG5cdFx0XHRcdFx0JHdpbmRvdy5oaXN0b3J5LmJhY2soKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGZ1bmN0aW9uIG5ld1JpcHBsZSgpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmlwcGxlQXBpLmNhbGwoJ2dldCcsICcvcmlwcGxlcy9uZXcnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGZ1bmN0aW9uIHNhdmUocmlwcGxlKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJpcHBsZUFwaS5jYWxsKCdwb3N0JywgJy9yaXBwbGVzLycgKyByaXBwbGUuaWQsIHJpcHBsZSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xufSkoKTsiLCIoZnVuY3Rpb24oKSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdGFuZ3VsYXJcblx0XHQubW9kdWxlKCdhcHAuaWRlJylcblx0XHRcdC5jb250cm9sbGVyKCdSaXBwbGVEZXRhaWxDb250cm9sbGVyJywgZnVuY3Rpb24ocmlwcGxlKSB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKCdSaXBwbGVEZXRhaWxDb250cm9sbGVyIGhlcmUnLCByaXBwbGUpO1xuXHRcdFx0XHR2YXIgdm0gPSB0aGlzO1xuXHRcdFx0XHR2bS5yaXBwbGUgPSByaXBwbGU7XG5cdFx0XHR9KTtcbn0pKCk7IiwiLy8gdG9kbyIsIihmdW5jdGlvbigpIHtcblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0YW5ndWxhclxuXHRcdC5tb2R1bGUoJ2FwcC5pZGUnKVxuXHRcdFx0LmNvbnRyb2xsZXIoJ1JpcHBsZUVkaXRDb250cm9sbGVyJywgZnVuY3Rpb24ocmlwcGxlRWRpdFNlcnZpY2UsIHJpcHBsZSkge1xuXHRcdFx0XHR2YXIgdm0gPSB0aGlzO1xuXHRcdFx0XHR2bS5pbmNyZW1lbnRWZXJzaW9uID0gcmlwcGxlRWRpdFNlcnZpY2UuaW5jcmVtZW50VmVyc2lvbjtcblx0XHRcdFx0dm0uc2F2ZSA9IHJpcHBsZUVkaXRTZXJ2aWNlLnNhdmU7XG5cdFx0XHR9KTtcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRhbmd1bGFyXG5cdFx0Lm1vZHVsZSgnYXBwLmlkZScpXG5cdFx0XHQuZmFjdG9yeSgncmlwcGxlRWRpdFNlcnZpY2UnLCBmdW5jdGlvbihyaXBwbGVBcGkpIHtcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRkaXNhYmxlOiBkaXNhYmxlLFxuXHRcdFx0XHRcdGluY3JlbWVudFZlcnNpb246IGluY3JlbWVudFZlcnNpb24sXG5cdFx0XHRcdFx0bG9hZDogbG9hZCxcblx0XHRcdFx0XHRzYXZlOiBzYXZlXG5cdFx0XHRcdH07XG5cblx0XHRcdFx0ZnVuY3Rpb24gZGlzYWJsZShfaWQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmlwcGxlQXBpLmNhbGwoJ2RlbGV0ZScsICcvcmlwcGxlcy8nICsgX2lkKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGZ1bmN0aW9uIGluY3JlbWVudFZlcnNpb24odmVyc2lvbikge1xuXHRcdFx0XHRcdHJldHVybiB2ZXJzaW9uKys7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRmdW5jdGlvbiBsb2FkKF9pZCkge1xuXHRcdFx0XHRcdHJldHVybiByaXBwbGVBcGkuY2FsbCgnZ2V0JywgJy9yaXBwbGVzLycgKyBfaWQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZnVuY3Rpb24gc2F2ZShyaXBwbGUpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmlwcGxlQXBpLmNhbGwoJ3B1dCcsICcvcmlwcGxlcy8nICsgcmlwcGxlLl9pZCwgcmlwcGxlKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG59KSgpOyIsIihmdW5jdGlvbigpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdGFuZ3VsYXJcblx0XHQubW9kdWxlKCdhcHAuaWRlJylcblx0XHRcdC5jb250cm9sbGVyKCdJZGVJbmRleENvbnRyb2xsZXInLCBmdW5jdGlvbihpZGVJbmRleFNlcnZpY2UpIHtcblx0XHRcdFx0Y29uc29sZS5sb2coJ2VudGVyZWQgaW5kZXggY29udHJvbGxlciBmb3IgaWRlJyk7XG5cdFx0XHRcdHZhciB2bSA9IHRoaXM7XG5cdFx0XHRcdHZtLmZpbHRlciA9IGlkZUluZGV4U2VydmljZS5maWx0ZXI7XG5cdFx0XHRcdHZtLnJpcHBsZXMgPSBbXTtcblxuXHRcdFx0XHRhY3RpdmF0ZSgpO1xuXG5cdFx0XHRcdGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xuXHRcdFx0XHRcdGNvbnNvbGUubG9nKCdsb2FkaW5nIGRhdGEnKTtcblx0XHRcdFx0XHQvLyBsb2FkIGRhdGFcblx0XHRcdFx0XHRpZGVJbmRleFNlcnZpY2UubG9hZCh2bS5maWx0ZXIpLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuXHRcdFx0XHRcdFx0Y29uc29sZS5sb2coJ2RhdGEgbG9hZGVkJywgZGF0YSk7XG5cdFx0XHRcdFx0XHR2bS5yaXBwbGVzID0gZGF0YTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG59KSgpOyIsIihmdW5jdGlvbigpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdGFuZ3VsYXJcblx0XHQubW9kdWxlKCdhcHAuaWRlJylcblx0XHRcdC5mYWN0b3J5KCdpZGVJbmRleFNlcnZpY2UnLCBmdW5jdGlvbihyaXBwbGVBcGkpIHtcblx0XHRcdFx0Y29uc29sZS5sb2coJ3N0YXJ0ZWQgaW5kZXggc2VydmljZSBmb3IgaWRlJyk7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0ZmlsdGVyOiB7fSxcblx0XHRcdFx0XHRsb2FkOiBsb2FkXG5cdFx0XHRcdH07XG5cblx0XHRcdFx0ZnVuY3Rpb24gbG9hZChmaWx0ZXIpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmlwcGxlQXBpLmNhbGwoJ2dldCcsICcvcmlwcGxlcycsIGZpbHRlcik7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xufSkoKTsiLCIoZnVuY3Rpb24oKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHRhbmd1bGFyXG5cdFx0Lm1vZHVsZSgnYXBwLmlkZScpXG5cdFx0XHQuZGlyZWN0aXZlKCdyaXBGaWx0ZXInLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRyZXN0cmljdDogJ0UnLFxuXHRcdFx0XHRcdHNjb3BlOiB7XG5cdFx0XHRcdFx0XHRkYXRhOiAnPScsXG5cdFx0XHRcdFx0XHRmZXRjaDogJ0AnXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR0ZW1wbGF0ZVVybDogJ2lkZS9yaXAtZmlsdGVyLmRpcmVjdGl2ZS50bXBsLmh0bWwnLFxuXHRcdFx0XHRcdGNvbnRyb2xsZXJBczogJ3JpcEZpbHRlckNvbnRyb2xsZXInLFxuXHRcdFx0XHRcdGNvbnRyb2xsZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0dmFyIHZtID0gdGhpcztcblx0XHRcdFx0XHRcdHZtLmNyaXRlcmlhID0ge307XG5cdFx0XHRcdFx0XHR2bS5maWx0ZXIgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0Ly8gY2FsbCB0aGUgZmV0Y2ggY2FsbGJhY2sgYW5kIHRoZW4gYXNzaWduIG5ldyBkYXRhXG5cdFx0XHRcdFx0XHRcdC8vIGJpZGlyZWN0aW9uYWxseSB0byB1cGRhdGUgdGhlIGdyaWRcblx0XHRcdFx0XHRcdFx0ZmV0Y2goZnVuY3Rpb24ocmVzcG9uc2UpIHtcblx0XHRcdFx0XHRcdFx0XHR2bS5kYXRhID0gcmVzcG9uc2UuZGF0YTtcblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdH0pO1xufSkoKTsiLCIoZnVuY3Rpb24oKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHRhbmd1bGFyXG5cdFx0Lm1vZHVsZSgnYXBwLm1vbml0b3InLCBbJ2FwcC5jb3JlJ10pO1xufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdGFuZ3VsYXJcblx0XHQubW9kdWxlKCdhcHAubW9uaXRvcicpXG5cdFx0XHQuY29uZmlnKFxuXHRcdFx0XHRmdW5jdGlvbigkcm91dGVQcm92aWRlcikge1xuXHRcdFx0XHQkcm91dGVQcm92aWRlclxuXHRcdFx0XHRcdC53aGVuKCcvbW9uaXRvcicsIHtcblx0XHRcdFx0XHRcdHRlbXBsYXRlVXJsOiAnbW9uaXRvci9pbmRleC5odG1sJyxcblx0XHRcdFx0XHRcdGNvbnRyb2xsZXI6ICdNb25pdG9ySW5kZXhDb250cm9sbGVyJyxcblx0XHRcdFx0XHRcdGNvbnRyb2xsZXJBczogJ3ZtJ1xuXHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0LndoZW4oJy9tb25pdG9yL2luc3RhbmNlcy86aWQnLCB7XG5cdFx0XHRcdFx0XHR0ZW1wbGF0ZVVybDogJ21vbml0b3IvaW5zdGFuY2UtZGV0YWlsLmh0bWwnLFxuXHRcdFx0XHRcdFx0Y29udHJvbGxlcjogJ0luc3RhbmNlRGV0YWlsQ29udHJvbGxlcicsXG5cdFx0XHRcdFx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0XHRcdFx0XHRyZXNvbHZlOiB7XG5cdFx0XHRcdFx0XHRcdGluc3RhbmNlOiBmdW5jdGlvbigkcm91dGUsIGluc3RhbmNlRGV0YWlsU2VydmljZSkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBpbnN0YW5jZURldGFpbFNlcnZpY2UubG9hZCgkcm91dGUuY3VycmVudC5wYXJhbXMuaWQpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcdFxufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdGFuZ3VsYXJcblx0XHQubW9kdWxlKCdhcHAubW9uaXRvcicpXG5cdFx0XHQuY29udHJvbGxlcignTW9uaXRvckluZGV4Q29udHJvbGxlcicsIGZ1bmN0aW9uKG1vbml0b3JJbmRleFNlcnZpY2UpIHtcblx0XHRcdFx0dmFyIHZtID0gdGhpcztcblx0XHRcdFx0dm0uZmlsdGVyID0gbW9uaXRvckluZGV4U2VydmljZS5maWx0ZXI7XG5cdFx0XHRcdHZtLmluc3RhbmNlcyA9IFtdO1xuXG5cdFx0XHRcdGFjdGl2YXRlKCk7XG5cblx0XHRcdFx0ZnVuY3Rpb24gYWN0aXZhdGUoKSB7XG5cdFx0XHRcdFx0Ly8gbG9hZCBkYXRhXG5cdFx0XHRcdFx0bW9uaXRvckluZGV4U2VydmljZS5sb2FkKHZtLmZpbHRlcikudGhlbihmdW5jdGlvbihkYXRhKSB7XG5cdFx0XHRcdFx0XHR2bS5pbnN0YW5jZXMgPSBkYXRhO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0YW5ndWxhclxuXHRcdC5tb2R1bGUoJ2FwcC5tb25pdG9yJylcblx0XHRcdC5mYWN0b3J5KCdtb25pdG9ySW5kZXhTZXJ2aWNlJywgZnVuY3Rpb24ocmlwcGxlQXBpKSB7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0ZmlsdGVyOiB7fSxcblx0XHRcdFx0XHRsb2FkOiBsb2FkXG5cdFx0XHRcdH07XG5cblx0XHRcdFx0ZnVuY3Rpb24gbG9hZChmaWx0ZXIpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmlwcGxlQXBpLmNhbGwoJ2dldCcsICcvaW5zdGFuY2VzJywgZmlsdGVyKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG59KSgpOyIsIihmdW5jdGlvbigpIHtcblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0YW5ndWxhclxuXHRcdC5tb2R1bGUoJ2FwcC5tb25pdG9yJylcblx0XHRcdC5jb250cm9sbGVyKCdJbnN0YW5jZURldGFpbENvbnRyb2xsZXInLCBmdW5jdGlvbihpbnN0YW5jZSkge1xuXHRcdFx0XHR2YXIgdm0gPSB0aGlzO1xuXHRcdFx0XHR2bS5pbnN0YW5jZSA9IGluc3RhbmNlO1xuXHRcdFx0fSk7XG59KSgpOyIsIihmdW5jdGlvbigpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdGFuZ3VsYXJcblx0XHQubW9kdWxlKCdhcHAubW9uaXRvcicpXG5cdFx0XHQuZmFjdG9yeSgnaW5zdGFuY2VEZXRhaWxTZXJ2aWNlJywgZnVuY3Rpb24ocmlwcGxlQXBpKSB7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bG9hZDogbG9hZFxuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdGZ1bmN0aW9uIGxvYWQoaWQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmlwcGxlQXBpLmNhbGwoJ2dldCcsICcvaW5zdGFuY2VzLycgKyBpZCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xufSkoKTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
