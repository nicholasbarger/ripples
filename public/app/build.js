!function(){"use strict";angular.module("app.core",["ngRoute"])}();
!function(){"use strict";angular.module("app.ide",["app.core"])}();
!function(){"use strict";angular.module("app",["app.ide","app.monitor"])}();
!function(){"use strict";angular.module("app").config(function(){})}();
!function(){"use strict";angular.module("app.core").directive("rip-grid",function(){return{restrict:"E",scope:{data:"@"},templateUrl:"rip-grid.directive.tmpl.html",transclude:!0,controllerAs:"ripGridController",controller:function(){}}})}();
!function(){"use strict";angular.module("app.core").directive("ripInput",function(){return{restrict:"E",scope:{label:"@",name:"@",ngModel:"=",placeholder:"@",readonly:"@",type:"@"},require:"ngModel",templateUrl:"core/rip-input.directive.tmpl.html",controllerAs:"ripInputController",controller:function(){}}})}();
!function(){"use strict";angular.module("app.core").factory("rippleApi",["$http","$q",function(t,e){function n(n,r,a,i,o){var u=e.defer();return-1===r.indexOf("api/v")&&(r="/api/v1"+r),t({method:n,url:r,data:a}).then(function(t){u.resolve(t.data)},function(t){u.reject(t)}),u.promise}return{call:n}}])}();
!function(){"use strict";angular.module("app-gallery",[])}();
!function(){"use strict";function l(l){l.when("/gallery",{templateUrl:"index.html",controller:"IndexController"}).when("/gallery/ripples/:id",{templateUrl:"gallery-detail.html",controller:"GalleryDetailController"})}angular.module("app-gallery").config(l),l.$inject=["$routeProvider"]}();
!function(){"use strict";function e(e){e.when("/ide",{templateUrl:"ide/index.html",controller:"IdeIndexController",controllerAs:"vm"}).when("/ide/create",{templateUrl:"ide/create.html",controller:"RippleCreateController",controllerAs:"vm",resolve:{ripple:["rippleCreateService",function(e){return e.newRipple()}]}}).when("/ide/detail/:id",{templateUrl:"ide/detail.html",controller:"RippleDetailController",controllerAs:"vm",resolve:{ripple:["rippleEditService",function(e){return e.ripple}]}}).when("/ide/disable/:id",{templateUrl:"ide/disable.html",controller:"RippleDisableController",controllerAs:"vm",resolve:{ripple:["rippleEditService",function(e){return e.ripple}]}}).when("/ide/edit/:id",{templateUrl:"ide/edit.html",controller:"RippleEditController",controllerAs:"vm",resolve:{ripple:["rippleEditService",function(e){return e.ripple}]}})}angular.module("app.ide").config(e),e.$inject=["$routeProvider"]}();
!function(){"use strict";angular.module("app.ide").controller("RippleCreateController",["rippleCreateService","ripple",function(e,r){var l=this;l.cancel=e.cancel,l.ripple=r,l.submit=e.save}])}();
!function(){"use strict";angular.module("app.ide").factory("rippleCreateService",["$window","rippleApi",function(e,n){function i(){e.history.back()}function r(){return n.call("get","/ripples/new")}function t(e){return n.call("post","/ripples/"+e.id,e)}return{cancel:i,newRipple:r,save:t}}])}();
!function(){"use strict";angular.module("app.ide").controller("RippleDetailController",["ripple",function(l){}])}();

!function(){"use strict";angular.module("app.ide").controller("RippleEditController",["rippleEditService","ripple",function(e,i){var r=this;r.incrementVersion=e.incrementVersion,r.save=e.save}])}();
!function(){"use strict";angular.module("app.ide").factory("rippleEditService",["rippleApi",function(e){function n(n){return e.call("delete","/ripples/"+n)}function r(e){return e++}function i(n){return e.call("get","/ripples/"+n)}function t(n){return e.call("put","/ripples/"+n._id,n)}return{disable:n,incrementVersion:r,load:i,save:t}}])}();
!function(){"use strict";angular.module("app.ide").controller("IdeIndexController",["ideIndexService",function(e){function o(){console.log("loading data"),e.load(l.filter).then(function(e){console.log("data loaded",e),l.ripples=e})}console.log("entered index controller for ide");var l=this;l.filter=e.filter,l.ripples=[],o()}])}();
!function(){"use strict";angular.module("app.ide").factory("ideIndexService",["rippleApi",function(e){function i(i){return e.call("get","/ripples",i)}return console.log("started index service for ide"),{filter:{},load:i}}])}();
!function(){"use strict";angular.module("app.ide").directive("ripFilter",function(){return{restrict:"E",scope:{data:"=",fetch:"@"},templateUrl:"ide/rip-filter.directive.tmpl.html",controllerAs:"ripFilterController",controller:function(){var t=this;t.criteria={},t.filter=function(){fetch(function(r){t.data=r.data})}}}})}();
!function(){"use strict";angular.module("app.monitor",["app.core"])}();
!function(){"use strict";angular.module("app.monitor").config(["$routeProvider",function(n){n.when("/monitor",{templateUrl:"monitor/index.html",controller:"MonitorIndexController",controllerAs:"vm"}).when("/monitor/instances/:id",{templateUrl:"monitor/instance-detail.html",controller:"InstanceDetailController",controllerAs:"vm",resolve:{instance:["$route","instanceDetailService",function(n,t){return t.load(n.current.params.id)}]}})}])}();
!function(){"use strict";angular.module("app.monitor").controller("MonitorIndexController",["monitorIndexService",function(n){function t(){n.load(o.filter).then(function(n){o.instances=n})}var o=this;o.filter=n.filter,o.instances=[],t()}])}();
!function(){"use strict";angular.module("app.monitor").factory("monitorIndexService",["rippleApi",function(n){function t(t){return n.call("get","/instances",t)}return{filter:{},load:t}}])}();
!function(){"use strict";angular.module("app.monitor").controller("InstanceDetailController",["instance",function(n){var t=this;t.instance=n}])}();
!function(){"use strict";angular.module("app.monitor").factory("instanceDetailService",["rippleApi",function(n){function t(t){return n.call("get","/instances/"+t)}return{load:t}}])}();
//# sourceMappingURL=data:application/json;base64,
